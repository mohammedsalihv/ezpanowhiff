<section>
  <div class="d-flex justify-content-left">
    <button style="margin-left: 3%; margin-top:5%; background-color:black; color:aliceblue; padding:7px; border-radius:5px;" onclick="goBack()">Go back</button>
  </div>
  <div class="container" style="margin-top: -6%; height:250vh;">
    <h4 id="addingMsg" style="text-align: end;">{{this.productAdding}}</h4>
    <h3 style="margin-bottom: 6%;" class="text-center">Edit Product</h3>
    <div class="row">
      <form id="form-editProduct" class="col s12" enctype="multipart/form-data" method="POST" action="/updateProduct">
        <div class="row">
          <div class="input-field col s12 m12 l6">
            <input value="{{data.productName}}" name="productName" id="productname" type="text">
            <label for="productname">Product name</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.brand}}" name="brand" id="Brand" type="text">
            <label for="Brand">Brand</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.oldPrice}}" name="oldPrice" id="oldPrice" type="text">
            <label for="oldPrice">Old Price</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.price}}" name="price" id="offerPrice" type="text">
            <label for="offerPrice">Offer price</label>
          </div>
        </div>
        <div class="row">
          <div class="input-field col s12 m12 l6">
            <input value="{{data.Qty}}" name="Qty" id="Quantity" type="text">
            <label for="Quantity">Quantity</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.offer}}" name="offer" id="offer" type="text">
            <label for="offer">Offer</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.trending}}" name="trending" id="trending" type="text">
            <label for="trending">Trending</label>
          </div>
        </div>
        <div class="row">
          <div class="input-field col s12 m12 l6">
            <input value="{{data.Size}}" name="size" id="sizes" type="text">
            <label for="sizes">Available sizes</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.Ingredients}}" name="Ingredients" id="Ingredients" type="text">
            <label for="Ingredients">Ingredients</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.IdealFor}}" name="IdealFor" id="idealFor" type="text">
            <label for="idealFor">Ideal For</label>
          </div>
          <div class="input-field col s12 m12 l6">
            <input value="{{data.update}}" name="update" id="stockupdate" type="text">
            <label for="stockupdate">Stock update</label>
          </div>
        </div>
        <div class="row">
          <div class="input-field col s10 m12 l8">
            <textarea name="features" id="Features">{{data.features}}</textarea>
            <label for="Features">Features</label>
          </div>
          <div class="input-field col s10 m12 l8">
            <textarea name="tags" id="tags">{{data.tags}}</textarea>
            <label for="tags">Tags</label>
          </div>
          <div class="input-field col s10 m12 l8">
            <textarea name="deliveryInfo" id="Packaging">{{data.deliveryInfo}}</textarea>
            <label for="Packaging">Packaging & Delivery</label>
          </div>
          <div class="input-field col s10 m12 l8">
            <textarea style="height: 2vh;" name="howTouse" id="howTouse">{{data.howTouse}}</textarea>
            <label for="howTouse">How to Use</label>
          </div>
        </div>
        <div class="row">
          <div class="input-field col s10 m6 l4">
            <textarea style="height: 1vh; margin-bottom:5%" name="description" id="description">{{data.description}}</textarea>
            <label for="description">Full description</label>
          </div>
        </div>
        <section>
          <div id="image-sec" class="row">
            <div class="col s10 m6 l4">
              <img style="width: 100px; height: 90px;" src="/images/cropped_{{data.img1}}" alt="">
            </div>
            <div class="col s10 m6 l4">
              <img style="width: 100px; height: 90px;" src="/images/cropped_{{data.img2}}" alt="">
            </div>
            <div class="col s10 m6 l4">
              <img style="width: 100px; height: 90px;" src="/images/cropped_{{data.img3}}" alt="">
            </div>
          </div>
        </section>
        <div class="input-field col s10 m6 l4">
          <div class="row mt-4"></div>
          <div class="input-uploads">
            <img id="preview-img1" src="assets/imgs/theme/upload.svg" alt="">
            <label class="btn-file-upload">
              <input class="form-control" id="file-input1" type="file" name="img1[]" accept="image/*" onchange="initCropper(event, 'preview-img1')">
            </label>
            <button style="margin-top: 5%; border-radius:50%; padding-top:3px; border:1px solid #fff;" class="bg badge-primary" onclick="removeImage('preview-img1', event)" type="button">
              <i class="lni lni-cross-circle"></i>
            </button>
          </div>
        </div>
        <div class="input-field col s10 m6 l4">
          <div class="row mt-4"></div>
          <div class="input-uploads">
            <img id="preview-img2" src="assets/imgs/theme/upload.svg" alt="">
            <label class="btn-file-upload">
              <input class="form-control" id="file-input2" type="file" name="img2[]" accept="image/*" onchange="initCropper(event, 'preview-img2')">
            </label>
            <button style="margin-top: 5%; border-radius:50%; padding-top:3px; border:1px solid #fff;" class="bg badge-primary" onclick="removeImage('preview-img2', event)" type="button">
              <i class="lni lni-cross-circle"></i>
            </button>
          </div>
        </div>
        <div class="input-field col s10 m6 l4">
          <div class="row mt-4"></div>
          <div class="input-uploads" style="margin-bottom: 2%;">
            <img id="preview-img3" src="assets/imgs/theme/upload.svg" alt="">
            <label class="btn-file-upload">
              <input class="form-control" id="file-input3" type="file" name="img3[]" accept="image/*" onchange="initCropper(event, 'preview-img3')">
            </label>
            <button style="margin-top: 5%; border-radius:50%; padding-top:3px; border:1px solid #fff;" class="bg badge-primary" onclick="removeImage('preview-img3', event)" type="button">
              <i class="lni lni-cross-circle"></i>
            </button>
          </div>
        </div>
       </div>
       <button style="color: rgb(255, 255, 255); background-color:black" id="btn-sbmit-product" class="btn right" type="submit">Submit</button>
      </form>
    </div>
</section>


<script src="path/to/cropper.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  
  function goBack() {
    window.history.back();
  }



   const productId = "{{productId}}";
 
  document.getElementById('form-editProduct').addEventListener('submit', edit);

  function edit(event) {
    event.preventDefault();

    const productName = document.getElementById('productname');
    const Brand = document.getElementById('Brand');
    const oldPrice = document.getElementById('oldPrice');
    const offerPrice = document.getElementById('offerPrice');
    const Quantity = document.getElementById('Quantity');
    const offer = document.getElementById('offer');
    const trending = document.getElementById('trending');
    const size = document.getElementById('sizes');
    const Ingredients = document.getElementById('Ingredients');
    const idealFor = document.getElementById('idealFor');
    const stockupdate = document.getElementById('stockupdate');
    const Features = document.getElementById('Features');
    const tags = document.getElementById('tags');
    const Packaging = document.getElementById('Packaging');
    const howTouse = document.getElementById('howTouse');
    const description = document.getElementById('description');

    if (!validateInput(productName, 'Product name cannot be empty')) return;
    if (!validateInput(Brand, 'Brand cannot be empty')) return;
    if (!validateInput(oldPrice, 'Old price cannot be empty')) return;
    if (!validateInput(offerPrice, 'Offer price cannot be empty')) return;
    if (!validateInput(Quantity, 'Quantity cannot be empty')) return;
    if (!validateInput(offer, 'Offer cannot be empty')) return;
    if (!validateInput(trending, 'Trending cannot be empty')) return;
    if (!validateInput(size, 'Size cannot be empty')) return;
    if (!validateInput(Ingredients, 'Ingredients cannot be empty')) return;
    if (!validateInput(idealFor, 'Ideal for cannot be empty')) return;
    if (!validateInput(stockupdate, 'Stock update cannot be empty')) return;
    if (!validateInput(Features, 'Features cannot be empty')) return;
    if (!validateInput(tags, 'Tags cannot be empty')) return;
    if (!validateInput(Packaging, 'Packaging cannot be empty')) return;
    if (!validateInput(howTouse, 'How to use cannot be empty')) return;
    if (!validateInput(description, 'Description cannot be empty')) return;

    const oldPriceValue = parseFloat(oldPrice.value);
    const offerPriceValue = parseFloat(offerPrice.value);

    if (oldPriceValue <= offerPriceValue) {
      Swal.fire({
        icon: 'error',
        title: 'Validation Error',
        text: 'Offer price should be less than old price',
      });
      return;
    }



    const formData = new FormData(document.getElementById('form-editProduct'));

    fetch(`/admin/productUpdate/${productId}`, {
      method: 'POST',
      body: formData
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then(data => {
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: 'Product edited successfully',
      })
      .then(() => {
        window.location.href = '/admin/productManagement';
      });
    })
    .catch(error => {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Product editing failed',
      });
    });
  }

  function validateInput(input, errorMessage) {
    if (!input.value.trim()) {
      failureMessage(errorMessage);
      return false;
    }
    return true;
  }

  function failureMessage(message) {
    Swal.fire({
      text: message,
      position: 'top',
      timer: 3000,
      background: 'red',
      color: 'white',
      showConfirmButton: false
    });
  }
</script>












<script>

  let croppers = {}; // Initialize an object to store Cropper instances

  function initCropper(event, imgId) {
    const input = event.target;
    const imgElement = document.getElementById(imgId);
    const reader = new FileReader();

    reader.onload = function (e) {
      imgElement.src = e.target.result;

      // Check if a Cropper instance already exists for this image
      if (croppers[imgId]) {
        // Destroy the existing Cropper instance
        croppers[imgId].destroy();
      }

      // Initialize Cropper.js with aspectRatio set to NaN
      const cropper = new Cropper(imgElement, {
        aspectRatio: NaN, // Allow free cropping without a fixed aspect ratio
        viewMode: 1, // Enable the preview mode
        crop(event) {
          // Do something when the crop is complete
        }
      });

      // Save the new Cropper instance for the current image
      croppers[imgId] = cropper;
    };

    // Read the selected file as a Data URL
    reader.readAsDataURL(input.files[0]);
  }


  function removeImage(imgId, event) {
    event.preventDefault(); // Prevent default action of the button
    const imgElement = document.getElementById(imgId);
    const parentDiv = imgElement.parentNode.parentNode; // Get the parent div of the image
    // Reset the input value to allow selecting the same file again
    const inputFile = parentDiv.querySelector('input[type="file"]');
    inputFile.value = '';
    // Remove the image preview
    imgElement.src = 'assets/imgs/theme/upload.svg';
    // Remove the Cropper instance if it exists
    if (croppers[imgId]) {
      croppers[imgId].destroy();
      delete croppers[imgId]; // Remove the Cropper instance from the object
    }
  }



  function removeImage1(imgId, event) {
    event.preventDefault(); // Prevent default action of the button
    const imgElement = document.getElementById(imgId);
    const parentDiv = imgElement.parentNode.parentNode; // Get the parent div of the image
    // Reset the input value to allow selecting the same file again
    const inputFile = parentDiv.querySelector('input[type="file"]');
    inputFile.value = '';
    // Remove the image preview
    imgElement.src = 'assets/imgs/theme/upload.svg';
    // Remove the Cropper instance if it exists
    if (croppers[imgId]) {
      croppers[imgId].destroy();
      delete croppers[imgId]; // Remove the Cropper instance from the object
    }
  }

  function removeImage2(imgId, event) {
    event.preventDefault(); // Prevent default action of the button
    const imgElement = document.getElementById(imgId);
    const parentDiv = imgElement.parentNode.parentNode; // Get the parent div of the image
    // Reset the input value to allow selecting the same file again
    const inputFile = parentDiv.querySelector('input[type="file"]');
    inputFile.value = '';
    // Remove the image preview
    imgElement.src = 'assets/imgs/theme/upload.svg';
    // Remove the Cropper instance if it exists
    if (croppers[imgId]) {
      croppers[imgId].destroy();
      delete croppers[imgId]; // Remove the Cropper instance from the object
    }
  }

  function removeImage3(imgId, event) {
    event.preventDefault(); // Prevent default action of the button
    const imgElement = document.getElementById(imgId);
    const parentDiv = imgElement.parentNode.parentNode; // Get the parent div of the image
    // Reset the input value to allow selecting the same file again
    const inputFile = parentDiv.querySelector('input[type="file"]');
    inputFile.value = '';
    // Remove the image preview
    imgElement.src = 'assets/imgs/theme/upload.svg';
    // Remove the Cropper instance if it exists
    if (croppers[imgId]) {
      croppers[imgId].destroy();
      delete croppers[imgId]; // Remove the Cropper instance from the object
    }
  }




</script>

<script>
  function goBack(){
    console.log('eee')
    window.location.href = '/admin/productManagement/'; 
  }
</script>
<script src="/Javascript/sidebar.js"></script>